#+HUGO_BASE_DIR: ~/Projects/manuel-arguelles.github.io
#+HUGO_SECTION: posts
#+startup: logdone

* DONE Hello world!
CLOSED: [2020-05-17 Sun 22:02]
:PROPERTIES:
:EXPORT_FILE_NAME: hello-world
:END:
First post! I've finally decided to return to blogging, or at least to give it a try. The idea is to document my ideas, projects and failures.

I'll be using [[https://gohugo.io/][Hugo]] to generate the site and [[https://help.github.com/en/github/working-with-github-pages][GitHub's pages]] to host it.

* DONE Blogging workflow                                               :blog:
  CLOSED: [2021-01-09 Sat 18:55]
  :PROPERTIES:
  :EXPORT_FILE_NAME: blogging-workflow
  :END:
  I'm still trying to figure out the best workflow for me, for now I'm using [[https://www.gnu.org/software/emacs/][Emacs]] with [[https://orgmode.org/][Org mode]], the package that generates the Markdown from the org files is called [[https://ox-hugo.scripter.co/][ox-hugo]]. I'm using the development version of [[https://www.spacemacs.org/][Spacemacs]] and the installation was super easy. My configuration looks like this:
  #+begin_src emacs-lisp
  dotspacemacs-configuration-layers
  '(
    (org :variables
         org-want-todo-bindings t
         org-enable-hugo-support t)
   )
   #+end_src
   
   All the posts (blogs entries) are in one file, as recommended by ox-hugo, each entry is a todo. The reason for that is that once the status changes to done, the date is recorded. This is quite handy to date the entries once you are done writing them.

   For the hosting I'm using two repositories, the output which is basically the HTML part (that's the public/ directory in the Hugo structure) and the rest in a separate repository.

* DONE Installing Slackware on a Raspberry PI4                       :arm:pi:
  CLOSED: [2021-01-22 Fri 20:16]
  :PROPERTIES:
  :EXPORT_FILE_NAME: sarpi
  :END:
  I believe ARM architecture to be the future; and while I wait for the [[https://www.khadas.com/vim3][Khadas VIM3]] to arrive I thought it may be a good idea to see if the Raspberry Pi could replace my desktop (I hope to achieve that with the VIM3). My Linux distribution of choice is [[http://www.slackware.com/][Slackware]], one of the many reasons that I like it for, is that you get a sort of two distros in one: It can be a rolling distribution (just like [[https://archlinux.org/][Arch Linux]]) or a fixed one. This allows me to get the rolling one (which is called -current and gets updated almost daily) on my desktop to enjoy the latest version of everything, while having a more stable one (fixed version) like 14.4 on my NAS server.

  Slackware has an official ARM port for 32bits and the work for a 64bits version (aarch64) has already started, so the timing is perfect. I have a Raspberry Pi 4 with 4MB or RAM. The installation is possible thanks to the great work of the [[https://sarpi.fatdog.eu/][SARPi project]], SARPi packs the binary files from the Raspberry foundation, the kernel and configurations files in a way that works with the official installation.

  The installation was smooth following the excellent documentation of the SARPi project, the only issue for me was that I didn't want to download an ISO or mirror the repository as a source for installation. Network installation is of course possible, but I was away from my router and the packages required for a WPA wireless connection are not available in the installer. However, it just a matter of pulling the missing packages over an usb drive from the [[ftp://ftp.arm.slackware.com/slackwarearm/slackwarearm-current/][repository]].

  The packages required are:
  #+begin_src bash
    wpa_supplicant
    wireless_tools
    iw
    libnl3
  #+end_src

  After that the wireless interface can be configured as usual.

  It took me a while to install all the packages that I normally use and restore some of my configuration (dot files) but overall the process was quite pleasant, performance wise, it is ok, but struggles a bit playing YouTube videos, so I wouldn't recommend it as a desktop replacement. Maybe their new version with 8GB of RAM is more suitable for that, but at this point I already have too many RPis and can't justify buying another one. So my quest to replace my desktop with ARM continues...

* DONE Mining on a Raspberry PI4                             :arm:pi4:monero:
  CLOSED: [2021-03-27 Sat 01:32]
  :PROPERTIES:
  :EXPORT_FILE_NAME: mining
  :END:
  I have an extra Raspberry Pi4 doing basically nothing, and with the Nano R4S on its way to replace my router I'd soon have 2 Pi4 doing nothing, so until I find a purpose for them, why not get them to mine a bit! I've been a huge fan of [[https://www.getmonero.org/][Monero]], I like everything of it, from the name (in Esperanto, a language that I have been slowly trying to learn) to its superb privacy. Mining Monero helps with the decentralization of the network. I did a bit of research and went with a small mining pool. Small mining pools take longer to find a block, but the reward gets divided with less people.

  I downloaded the mining software called xmrig, which apparently is one of the best, fired up my Raspberry Pi4 with the aarch64 version of [[https://downloads.raspberrypi.org/raspios_arm64/images/][Raspberry OS]], downloaded and compiled the [[https://github.com/xmrig/xmrig][code]] and started mining. That was pretty easy, however, the hash rate was a bit small, I was getting only 88 hashes per second. Usually modern CPUs should give at least 1 or 1.5 KH/s, that's more than 10 times of what I'm getting.

  This version is not [[https://www.raspberrypi.org/documentation/configuration/config-txt/overclocking.md][overclocked]] and I noticed that [[https://www.kernel.org/doc/html/latest/admin-guide/mm/hugetlbpage.html][huge pages]] were not available, I have 4 GB or RAM, so huge pages would probably improve things a bit. After googling around I found that the kernel that ships with the Raspberry OS does not includes support for huge pages. Time to recompile it, I followed the 64 bits instructions on their website to [[https://www.raspberrypi.org/documentation/linux/kernel/building.md][rebuild the kernel]] and enabled huge pages. The relevant entries in the configuration that were changed were:
  #+begin_src bash
    CONFIG_CGROUP_HUGETLB=y
    CONFIG_SYS_SUPPORTS_HUGETLBFS=y
    CONFIG_ARCH_ENABLE_HUGEPAGE_MIGRATION=y
    CONFIG_HAVE_ARCH_TRANSPARENT_HUGEPAGE=y
    CONFIG_TRANSPARENT_HUGEPAGE=y
    CONFIG_TRANSPARENT_HUGEPAGE_ALWAYS=y
    # CONFIG_TRANSPARENT_HUGEPAGE_MADVISE is not set
    CONFIG_HUGETLBFS=y
    CONFIG_HUGETLB_PAGE=y
  #+end_src

  If you use ~make menuconfig~ (as I did) those are the menu options that I enabled: ~Memory Management options~ --> ~Transparent Hugepage Support~, ~File systems~ --> ~Pseudo filesystems~ --> ~HugeTLB file system support~ and finally ~General setup~ --> ~Control Group support~ --> ~HugeTLB controller~ and that was it. I also took the opportunity to overclock the CPU a bit, I don't have a powerful fan (the ICE Tower is on its way) so I just added this to ~/boot/config.txt~:
  #+begin_src bash
    over_voltage=2
    arm_freq=1700
    max_framebuffers=0
    gpu_mem=16
  #+end_src

  Which basically increases a bit the CPU clock and lowers the memory used for the GPU and frame buffers. I also changed the boot setup to start without X. With all of this, there was an improvement, but I think it can be better, probably not much better, but there's still room to overclock and fine tune the huge pages configuration. But for now, it is giving around 100 hashes per second, nothing crazy but taking in consideration that it was just collecting dust, why not.

  This is the current output of xmrig:
  #+begin_src
    [2021-03-20 22:59:41.396]  miner    speed 10s/60s/15m 99.61 99.70 99.71 H/s max 118.2 H/s
    [2021-03-20 22:59:50.125]  cpu      accepted (5798/0) diff 3391 (146 ms)
    [2021-03-20 23:00:41.442]  miner    speed 10s/60s/15m 99.61 99.61 99.70 H/s max 118.2 H/s
    [2021-03-20 23:00:52.844]  cpu      accepted (5799/0) diff 3391 (144 ms)
    |    CPU # | AFFINITY | 10s H/s | 60s H/s | 15m H/s |
    |        0 |        0 |   24.51 |   24.64 |   24.69 |
    |        1 |        1 |   24.83 |   24.79 |   24.87 |
    |        2 |        2 |   24.83 |   25.07 |   25.08 |
    |        3 |        3 |   25.14 |   25.06 |   25.07 |
    |        - |        - |   99.31 |   99.55 |   99.70 |
    [2021-03-20 23:01:03.030]  miner    speed 10s/60s/15m 99.31 99.55 99.70 H/s max 118.2 H/s
  #+end_src

  So, is it profitable? No, probably not, even with the little power consumption of the Pi, it's probably not worth it. However, as a relative inexpensive way of supporting the project, it's great. Just avoid the big pools; to keep the network healthy it is important to have several, independent, small pools rather than a few big ones.
  
* DONE My desktop died
CLOSED: [2022-11-27 Sun 21:23]
:PROPERTIES:
:EXPORT_FILE_NAME: vim3
:END:
I don't remember the exact day that my desktop PC decided to stop working, but it did, and since then I have been using a single board computer as my daily driver, the Khadas VIM3, with an old NVME drive running Manjaro. As a PC it is usable (probably better than the Raspberry Pi) but the lack of RAM memory is very noticeable. The VIM3 is an Amlogic A311D with 4 GB of RAM.

I do believe that the future of PC would be the reduced instruction set computer (RISC), I think its counter part, the complex instruction set computer (CISC) has reached his peek and there's little to no room for improvement. The adoption and development has been quite slow, but steady, we now have the Rockchip 3588, capable of handling up to 32 GB or RAM memory, check out the Firefly ITX-3588J.

Anyways, back to my VIM3. I got it working easily, pipewire was crashing the kernel, but pulse audio seems to be working fine, wayland works fine with the latest mesa package, the panfrost team is amazing, true heroes! Having a basic nvme drives definitely improves the experience. I'd probably be happy with dual monitor and more RAM... Introducing the Khadas Edge 2, it seems to have everything, 16GB or RAM, dual display, but, limited storage options, just 64GB eMMC, if you need more, i'd have to be an external drive over USB3.

Back to the Fireflyx ITX-3588J, its problem is the price, that range is similar to a modern x86 computer, hopefully as time goes by, we will see more and more RK3588 boards, maybe one with 16/32GB, dual display and nvme, in the mean time, I'd probably get back to CISC.

[[file:images/vim3.png]]

* DONE Vortex, the keyboard :pi4:
CLOSED: [2023-01-15 Sun 23:25]
:PROPERTIES:
:EXPORT_FILE_NAME: vortex
:END:
The Vortex Pok3r is a 60% keyboard that I got as a gift from a friend. It's a solid keyboard but the firmware is proprietary and quite restrictive; I like to set the arrows keys to follow the vi keybindings (h,j,k,l), this is not possible with the stock firmware, besides that I also use the caps lock key as left control, this is possible, but it is always better to have full control of all the keys. This entry is describes my journey.

#+caption: Original keyboard
[[file:images/vortex1.jpeg]]

My initial goal was to just install QMK firmware, after a bit of research I came across [[https://github.com/pok3r-custom/qmk_pok3r][a fork of QMK for the Pok3r]], with a custom tool to [[https://github.com/pok3r-custom/pok3rtool/wiki][flash images]]. The only missing part was how to get into the chip and replace the proprietary firmware with this on. The chip is an HT32.

#+caption: chipset
[[file:images/vortex2.jpeg]]

Unlocking the HT32 is possible thanks to a [[https://github.com/ChaoticEnigma/openocd-ht32][fork of OpenOCD]] with support to this chip, in order to connect to it an adapter/device is required, the recommended one seems to be an ST-Link (JTAG/SWD interface), unfortunately I don't have such device and I don't have a use for one rather than this project, investing in such a tool for only one project didn't seem like a good idea, lucky for me, OpenOCD supports using the GPIO pins of a Raspberry as interface and I do happen to have a Raspberry 4, so I gave it a try.

#+begin_src
interface bcm2835gpio

debug_level 2
adapter_khz 1


### those are the numbers for pi4
bcm2835gpio_peripheral_base 0xFE000000
bcm2835gpio_speed_coeffs 236181 60


## use pinout.xyz, those are pins 38 and 40
bcm2835gpio_swd_nums 20 21

## pin 12 on the PI
bcm2835gpio_srst_num 18

## dont forget pin 9 for Ground
transport select swd

## Thanks to Borislav Nikolov
#+end_src

I saw the SWD connector on the board and went with the easy route: push some jumper wires on it and give it a try, of course that didn't work, the connection was too loose and failed randomly, even after trying to solder them the problem persisted, probably because the copper plates were on the opposite side, which makes it difficult to get a good connection without removing all the switches and resolder the wires from the (other) right side, eventually I ended up doing it.

#+caption: First try, from the wrong side
[[file:images/vortex3.jpeg]]

#+caption: With pins soldered from the right side
[[file:images/vortex4.jpeg]]

With a good connection it was possible to flash the HT32 with the custom firmware using the forked version of OpenOCD and from there loading the custom QMK firmware with my keymap to it using pok3rtool.

There was some rust on the plate and since I got all the brown mx switches out, I decided to paint the whole plate and case black and get some gateron yellow switches (since they are super cheap and quite decent), here are some pictures of the final product. Thanks to [[https://github.com/ChaoticEnigma][Charlie Waters]] for making this possible.

#+caption: Rusty plate
[[file:images/vortex5.jpeg]]

#+caption: Paint job
[[file:images/vortex6.jpeg]]

#+caption: Final keyboard
[[file:images/vortex7.jpeg]]
